user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 4096;
    types_hash_bucket_size 256;
    client_max_body_size 0;  # 允许大文件上传（Docker 镜像层）

    # Gzip 压缩（对 JSON 响应有效）
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/vnd.docker.distribution.manifest.v2+json;

    # Rate Limiting 配置 - 防止滥用
    # TODO: 根据实际需求调整限流参数
    
    # 限制每个 IP 的请求速率：每秒 10 个请求，突发 20 个
    limit_req_zone $binary_remote_addr zone=registry_limit:10m rate=10r/s;
    
    # 限制每个 IP 的并发连接数：最多 10 个
    limit_conn_zone $binary_remote_addr zone=registry_conn:10m;
    
    # 限制下载带宽（可选）：每个连接 10MB/s
    # limit_rate 10m;

    # 上游 Registry 服务
    upstream docker_registry {
        server registry:5000;
        keepalive 32;
    }

    server {
        listen 80;
        server_name _;  # Traefik 会处理域名路由

        # 安全头（Traefik 可能已经添加，这里作为备份）
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Docker Registry API 端点
        location /v2/ {
            # 应用 Rate Limiting
            limit_req zone=registry_limit burst=20 nodelay;
            limit_conn registry_conn 10;

            # 代理到 Registry
            proxy_pass http://docker_registry;
            
            # 必需的 Headers
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Docker Registry 特定 Headers
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # 透传认证信息
            proxy_pass_request_headers on;
            
            # 超时配置（镜像层下载可能需要较长时间）
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # 缓冲配置（禁用缓冲以支持大文件流式传输）
            proxy_buffering off;
            proxy_request_buffering off;
            
            # HTTP 版本
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # 健康检查端点（可选，用于监控）
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 拒绝其他路径
        location / {
            return 404 '{"errors":[{"code":"NOT_FOUND","message":"Not Found"}]}';
            add_header Content-Type application/json;
        }
    }
}
